name: C/C++ CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write

jobs:
  format:
    name: "‚ùØ Format"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format
      - name: Check formatting
        run: |
          git diff --exit-code -- $(git ls-files '*.cpp' '*.hpp') \
            || (echo "üôÖ‚Äç‚ôÇÔ∏è Code is not clang‚Äëformatted. Run `clang-format -i`." && exit 1)

  build_windows:
    name: "‚ùØ Build & Test (Windows)"
    runs-on: windows-latest
    needs: format
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup MSYS2 toolchain
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-boost
            cmake
      - name: Configure
        run: |
          mkdir build && cd build
          cmake .. -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Debug
      - name: Build
        run: cmake --build build --parallel
      - name: Run tests
        run: cd build && ctest --output-on-failure

  build_linux:
    name: "‚ùØ Build, Test & Coverage (Linux)"
    runs-on: ubuntu-latest
    needs: format
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            libboost-all-dev \
            lcov
      - name: Configure with coverage flags
        run: |
          mkdir build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_C_FLAGS="--coverage" \
            -DCMAKE_CXX_FLAGS="--coverage"
      - name: Build
        run: cmake --build build --parallel
      - name: Run tests
        run: cd build && ctest --output-on-failure
      - name: Capture coverage
        run: |
          cd build
          /usr/bin/geninfo . \
            --rc geninfo_unexecuted_blocks=1 \
            --ignore-errors mismatch \
            . \
          --output-filename coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          genhtml coverage.info --output-directory coverage-html
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/coverage-html